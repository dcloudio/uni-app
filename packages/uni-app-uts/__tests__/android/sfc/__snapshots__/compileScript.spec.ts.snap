// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SFC analyze <script> bindings auto name inference basic 1`] = `
"const a = 1
export default defineComponent({
  __name: 'FooBar',
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

return (): any | null => {

  return _tD(a)
}
}

})"
`;

exports[`SFC analyze <script> bindings auto name inference do not overwrite manual name (call) 1`] = `
"import { defineComponent } from 'vue'
        const __default__ = defineComponent({
          name: 'Baz'
        })
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;
const a = 1
return (): any | null => {

  return _tD(a)
}
}

})"
`;

exports[`SFC analyze <script> bindings auto name inference do not overwrite manual name (object) 1`] = `
"const __default__ = {
          name: 'Baz'
        }
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;
const a = 1
return (): any | null => {

  return _tD(a)
}
}

})"
`;

exports[`SFC analyze <script> bindings defineSlots basic 1`] = `
"export default defineComponent({
  __name: 'FooBar',
  slots: Object as SlotsType<{default: { times: number; name: string }}>,
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;


        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> binding analysis for destructure 1`] = `
"export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const { foo, b: bar, ['x' + 'y']: baz, x: { y, zz: { z }}} = {}
      
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check TS annotations 1`] = `
"import { Foo, Bar, Baz, Qux, Fred } from './x'
        const a = 1
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        function b() {}
        
return (): any | null => {

const _component_Comp = resolveComponent("Comp")

  return _cE(Fragment, null, [
    _tD(a as Foo) + " " + _tD(b<Bar>()) + " " + _tD(unref(Baz)) + " ",
    _cV(_component_Comp, null, _uM({
      default: withScopedSlotCtx(({ data }: Qux): any[] => [_tD(data)]),
      _: 1 /* STABLE */
    })),
    _cE(Fragment, null, RenderHelpers.renderList(_ctx.list as Fred, ({ z = _ctx.x as Qux }, __key, __index, _cached): any => {
      return _cE("view")
    }), 256 /* UNKEYED_FRAGMENT */)
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check attribute expressions 1`] = `
"import { bar, baz } from './x'
        const cond = true
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => {

  return _cE("view", _uM({
    class: _nC([cond ? '' : unref(bar)(), 'default']),
    style: _nS(unref(baz))
  }), null, 6 /* CLASS, STYLE */)
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check components 1`] = `
"import { FooBar, FooBaz, FooQux, foo } from './x'
        const fooBar: FooBar = 1
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => {

  return _cE(Fragment, null, [
    _cV(unref(FooBaz)),
    _cV(unref(FooQux)),
    _cV(unref(foo)),
    " FooBar "
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check directive 1`] = `
"import { vMyDir } from './x'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => {

  return withDirectives(_cE("view", null, null, 512 /* NEED_PATCH */), [
    [unref(vMyDir)]
  ])
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check dynamic arguments 1`] = `
"import { FooBar, foo, bar, unused, baz } from './x'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => {

  return _cE(Fragment, null, [
    _cV(unref(FooBar)),
    _cV(unref(FooBar)),
    _cE("view", normalizeProps(_uM({ [(unref(bar).attrName) || ""]: 15 })), null, 16 /* FULL_PROPS */),
    _cE("view", _uM({ unused: "unused" })),
    _cV(unref(FooBar))
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check js template string interpolations 1`] = `
"import { VAR, VAR2, VAR3 } from './x'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => {

  return _tD(\`\${unref(VAR)}VAR2\${unref(VAR3)}\`)
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check last tag 1`] = `
"import { FooBaz, Last } from './x'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => {

  return _cE(Fragment, null, [
    _cV(unref(FooBaz)),
    _cV(unref(Last))
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check template ref 1`] = `
"import { foo, bar, Baz } from './foo'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

          
return (): any | null => {

  return _cE(Fragment, null, [
    _cE("view", _uM({
      ref_key: "foo",
      ref: foo
    }), null, 512 /* NEED_PATCH */),
    _cE("view", _uM({ ref: "" }), null, 512 /* NEED_PATCH */),
    _cV(unref(Baz), _uM({
      ref_key: "bar",
      ref: bar
    }), null, 512 /* NEED_PATCH */)
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> dev mode import usage check vue interpolations 1`] = `
"import { x, y, z, x$y } from './x'
      
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
return (): any | null => {

  return _cE("view", _uM({
    id: unref(z) + 'y'
  }), _tD(unref(x)) + " " + _tD(_ctx.yy) + " " + _tD(unref(x$y)), 9 /* TEXT, PROPS */, ["id"])
}
}

})"
`;

exports[`SFC compile <script setup> errors should allow defineProps/Emit() referencing imported binding 1`] = `
"import { bar } from './bar'
        
export default defineComponent({
  props: {
          foo: {
            default: () => bar
          }
        },
  emits: {
          foo: () => bar > 1
        },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
        
        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> errors should allow defineProps/Emit() referencing scope var 1`] = `
"const bar = 1
          
export default defineComponent({
  props: {
            foo: {
              default: bar => bar + 1
            }
          },
  emits: {
            foo: bar => bar > 1
          },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

          
          
        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> imports dedupe between user & helper 1`] = `
"import { ref } from 'vue'
      
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      let foo = $ref(1)
      
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> imports import dedupe between <script> and <script setup> 1`] = `
"import { x } from './x'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        x()
        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> imports should allow defineProps/Emit at the start of imports 1`] = `
"import { ref } from 'vue'
      
export default defineComponent({
  props: ['foo'],
  emits: ['bar'],
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
      
      const r = ref(0)
      
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> imports should extract comment for import or type declarations 1`] = `
"import a from 'a' // comment
        import b from 'b'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> imports should hoist and expose imports 1`] = `
"import { ref } from 'vue'
          import 'foo/css'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

          
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> imports should support module string names syntax 1`] = `
"import { "üòè" as foo } from './foo'
      
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode avoid unref() when necessary 1`] = `
"import { ref } from 'vue'
        import Foo, { bar } from './Foo.vue'
        import other from './util'
        import * as tree from './tree'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        const count = ref(0)
        const constant = {}
        const maybe = foo()
        let lett = 1
        function fn() {}
        
return (): any | null => {

  return _cE(Fragment, null, [
    _cV(Foo, null, _uM({
      default: withSlotCtx((): any[] => [_tD(unref(bar))]),
      _: 1 /* STABLE */
    })),
    _cE("view", _uM({ onClick: fn }), _tD(count.value) + " " + _tD(constant) + " " + _tD(unref(maybe)) + " " + _tD(unref(lett)) + " " + _tD(unref(other)), 1 /* TEXT */),
    " " + _tD(tree.foo())
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode referencing scope components and directives 1`] = `
"import ChildComp from './Child.vue'
        import SomeOtherComp from './Other.vue'
        import vMyDir from './my-dir'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => {

  return _cE(Fragment, null, [
    withDirectives(_cE("view", null, null, 512 /* NEED_PATCH */), [
      [unref(vMyDir)]
    ]),
    _cV(ChildComp),
    _cV(SomeOtherComp)
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode should work 1`] = `
"import { ref } from 'vue'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        const count = ref(0)
        
return (): any | null => {

  return _cE(Fragment, null, [
    _cE("view", null, _tD(count.value), 1 /* TEXT */),
    _cE("view", null, "static")
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode template assignment expression codegen 1`] = `
"import { ref } from 'vue'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        const count = ref(0)
        const maybe = foo()
        let lett = 1
        let v = ref(1)
        
return (): any | null => {

  return _cE(Fragment, null, [
    _cE("view", _uM({
      onClick: () => {count.value = 1}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {maybe.value = count.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {isRef(lett) ? trySetRefValue(lett, count.value) : lett = count.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {isRef(v) ? trySetRefValue(v, unref(v.also((_)=>{ v += 1 }))) : v += 1}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {isRef(v) ? trySetRefValue(v, unref(v.also((_)=>{ v -= 1 }))) : v -= 1}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {
              let a = '' + unref(lett)
              isRef(v) ? trySetRefValue(v, a) : v = a
           }
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {
              // nested scopes
              (()=>{
                let x = _ctx.a
                (()=>{
                  let z = x
                  let z2 = z
                })
                let lz = _ctx.z
              })
              isRef(v) ? trySetRefValue(v, _ctx.a) : v = _ctx.a
           }
    }), null, 8 /* PROPS */, ["onClick"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode template destructure assignment codegen 1`] = `
"import { ref } from 'vue'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        const val = {}
        const count = ref(0)
        const maybe = foo()
        let lett = 1
        
return (): any | null => {

  return _cE(Fragment, null, [
    _cE("view", _uM({
      onClick: () => {({ count: count.value } = val)}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {[maybe.value] = val}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {({ lett: lett } = val)}
    }), null, 8 /* PROPS */, ["onClick"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode template update expression codegen 1`] = `
"import { ref } from 'vue'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        const count = ref(0)
        const maybe = foo()
        let lett = 1
        
return (): any | null => {

  return _cE(Fragment, null, [
    _cE("view", _uM({
      onClick: () => {count.value++}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {--count.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {maybe.value++}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {--maybe.value}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {lett = tryUpdateRefNumber(lett, 1, false)}
    }), null, 8 /* PROPS */, ["onClick"]),
    _cE("view", _uM({
      onClick: () => {lett = tryUpdateRefNumber(lett, -1, true)}
    }), null, 8 /* PROPS */, ["onClick"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode v-model codegen 1`] = `
"import { ref } from 'vue'
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        const count = ref(0)
        const maybe = foo()
        let lett = 1
        
return (): any | null => {

  return _cE(Fragment, null, [
    _cE("input", _uM({
      modelValue: count.value,
      onInput: ($event: UniInputEvent) => {(count).value = $event.detail.value}
    }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue", "onInput"]),
    _cE("input", _uM({
      modelValue: unref(maybe),
      onInput: ($event: UniInputEvent) => {trySetRefValue(maybe, $event.detail.value)}
    }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue"]),
    _cE("input", _uM({
      modelValue: unref(lett),
      onInput: ($event: UniInputEvent) => {lett = trySetRefValue(lett, $event.detail.value)}
    }), null, 40 /* PROPS, NEED_HYDRATION */, ["modelValue"])
  ], 64 /* STABLE_FRAGMENT */)
}
}

})"
`;

exports[`SFC compile <script setup> inlineTemplate mode with defineExpose() 1`] = `
"export default defineComponent({
  setup(__props, { expose: __expose }: SetupContext) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        const count = ref(0)
        __expose({ count })
        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> should compile JS syntax 1`] = `
"const a = 1
      const b = 2
      
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> should expose top level declarations 1`] = `
"import { x } from './x'
      
      import { xx } from './x'
      let aa = 1
      const bb = 2
      function cc() {}
      class dd {}
      

export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      let a = 1
      const b = 2
      function c() {}
      class d {}
      
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> with TypeScript const Enum 1`] = `
"const enum Foo { A = 123 }
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> with TypeScript hoist type declarations 1`] = `
"export interface Foo {}
        type Bar = {}
      
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> with TypeScript runtime Enum 1`] = `
"enum Foo { A = 123 }
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        
return (): any | null => { return null }
}

})"
`;

exports[`SFC compile <script setup> with TypeScript runtime Enum in normal script 1`] = `
"export enum D { D = "D" }
          const enum C { C = "C" }
          enum B { B = "B" }
        
export default defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

        enum Foo { A = 123 }
        
return (): any | null => { return null }
}

})"
`;

exports[`SFC genDefaultAs <script setup> only 1`] = `
"const a = 1
      
const __sfc__ = defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as InstanceType<typeof __sfc__>;
const _cache = __ins.renderCache;

      
return (): any | null => { return null }
}

})
export default __sfc__"
`;

exports[`SFC genDefaultAs <script setup> only w/ ts 1`] = `
"const a = 1
      
const __sfc__ = defineComponent({
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy as InstanceType<typeof __sfc__>;
const _cache = __ins.renderCache;

      
return (): any | null => { return null }
}

})
export default __sfc__"
`;

exports[`SFC genDefaultAs normal <script> only 1`] = `
"
      const __sfc__ = defineComponent({})
      
export default __sfc__"
`;

exports[`SFC genDefaultAs normal <script> w/ cssVars 1`] = `
"
      const __sfc__ = defineComponent({})
      
export default __sfc__"
`;

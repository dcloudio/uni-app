// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineModel() basic usage 1`] = `
"export default defineComponent({
  props: {
    "modelValue": { required: true },
    "count": {},
    "toString": { type: Function },
  },
  emits: ["update:modelValue", "update:count", "update:toString"],
  setup(__props): any | null {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const modelValue = useModel<any>(__ins.props, "modelValue")
      const c = useModel<any>(__ins.props, "count")
      const toString = useModel<Function>(__ins.props, "toString")
      
return (): any | null => { return null }
}

})"
`;

exports[`defineModel() w/ array props 1`] = `
"export default defineComponent({
  props: /*#__PURE__*/mergeModels(['foo', 'bar'], {
    "count": {},
  }),
  emits: ["update:count"],
  setup(__props): any | null {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
      const count = useModel<any>(__ins.props, "count")
      
return (): any | null => { return null }
}

})"
`;

exports[`defineModel() w/ defineProps and defineEmits 1`] = `
"export default defineComponent({
  props: /*#__PURE__*/mergeModels({ foo: String }, {
    "modelValue": { default: 0 },
  }),
  emits: /*#__PURE__*/mergeModels(['change'], ["update:modelValue"]),
  setup(__props): any | null {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
      
      const count = useModel<any>(__ins.props, "modelValue")
      
return (): any | null => { return null }
}

})"
`;

exports[`defineModel() w/ local flag 1`] = `
"const local = true
      
export default defineComponent({
  props: {
    "modelValue": { local: true, default: 1 },
    "bar": { [key]: true },
    "hoist": { local },
  },
  emits: ["update:modelValue", "update:bar", "update:hoist"],
  setup(__props): any | null {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const foo = useModel<any>(__ins.props, "modelValue", { local: true })
      const bar = useModel<any>(__ins.props, "bar", { [key]: true })
      // const baz = defineModel('baz', { ...x })
      // const qux = defineModel('qux', x)

      // const foo2 = defineModel('foo2', { local: true, ...x })

      const hoist = useModel<any>(__ins.props, "hoist", { local })
      
return (): any | null => { return null }
}

})"
`;

exports[`defineModel() w/ types, basic usage 1`] = `
"export default defineComponent({
  props: {
    "modelValue": { type: [Boolean, String] },
    "count": { type: Number },
    "disabled": { type: Number, ...{ required: false } },
    "any": { type: [Object, Boolean] },
    "arr": { type: Array as PropType<string[]> },
    "arr1": { type: Array as PropType<string[]> },
  },
  emits: ["update:modelValue", "update:count", "update:disabled", "update:any", "update:arr", "update:arr1"],
  setup(__props): any | null {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const modelValue = useModel<any>(__ins.props, "modelValue")
      const count = useModel<number>(__ins.props, "count")
      const disabled = useModel<number>(__ins.props, "disabled")
      const any = useModel<any>(__ins.props, "any")
      const arr = useModel<string[]>(__ins.props, "arr")
      const arr1 = useModel<string[]>(__ins.props, "arr1")
      
return (): any | null => { return null }
}

})"
`;

exports[`defineModel() w/ types, production mode 1`] = `
"export default defineComponent({
  props: {
    "modelValue": { type: Boolean },
    "fn": { type: Function as PropType<() => void> },
    "fnWithDefault": { type: Function as PropType<() => void>, ...{ default: () => null } },
    "str": { type: String },
    "optional": { type: String, ...{ required: false } },
  },
  emits: ["update:modelValue", "update:fn", "update:fnWithDefault", "update:str", "update:optional"],
  setup(__props): any | null {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const modelValue = useModel<boolean>(__ins.props, "modelValue")
      const fn = useModel<() => void>(__ins.props, "fn")
      const fnWithDefault = useModel<() => void>(__ins.props, "fnWithDefault")
      const str = useModel<string>(__ins.props, "str")
      const optional = useModel<string>(__ins.props, "optional")
      
return (): any | null => { return null }
}

})"
`;

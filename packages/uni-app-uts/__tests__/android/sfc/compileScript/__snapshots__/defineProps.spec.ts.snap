// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defineProps basic usage 1`] = `
"const bar = 1

export default defineComponent({
  props: {
  foo: String
},
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

const props = __props

return (): any | null => { return null }
}

})"
`;

exports[`defineProps custom element retains the props type & default value & production mode 1`] = `
"interface Props { 
          foo?: number;
      }
      
export default defineComponent({
  __name: 'app.ce',
  __props: Props,
  props: {
    foo: { type: Number, required: false, default: 5.5 }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const props = __props;
      
return (): any | null => { return null }
}

})"
`;

exports[`defineProps custom element retains the props type & production mode 1`] = `
"
export default defineComponent({
  __name: 'app.ce',
  props: {
    foo: { type: Number, required: true }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const props = __props
      
return (): any | null => { return null }
}

})"
`;

exports[`defineProps defineProps w/ runtime options 1`] = `
"
export default defineComponent({
  props: { foo: String },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

const props = __props

return (): any | null => { return null }
}

})"
`;

exports[`defineProps destructure without enabling reactive destructure 1`] = `
"
export default defineComponent({
  props: {
    foo: { type: Foo, required: true }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const { foo } = __props
      
return (): any | null => { return null }
}

})"
`;

exports[`defineProps should escape names w/ special symbols 1`] = `
"
export default defineComponent({
  props: {
    "spa ce": { type: Object, required: true },
    "exclamation!mark": { type: Object, required: true },
    "double\\"quote": { type: Object, required: true },
    "hash#tag": { type: Object, required: true },
    "dollar$sign": { type: Object, required: true },
    "percentage%sign": { type: Object, required: true },
    "amper&sand": { type: Object, required: true },
    "single'quote": { type: Object, required: true },
    "round(brack)ets": { type: Object, required: true },
    "aste*risk": { type: Object, required: true },
    "pl+us": { type: Object, required: true },
    "com,ma": { type: Object, required: true },
    "do.t": { type: Object, required: true },
    "sla/sh": { type: Object, required: true },
    "co:lon": { type: Object, required: true },
    "semi;colon": { type: Object, required: true },
    "angle<brack>ets": { type: Object, required: true },
    "equal=sign": { type: Object, required: true },
    "question?mark": { type: Object, required: true },
    "at@sign": { type: Object, required: true },
    "square[brack]ets": { type: Object, required: true },
    "back\\\\slash": { type: Object, required: true },
    "ca^ret": { type: Object, required: true },
    "back\`tick": { type: Object, required: true },
    "curly{bra}ces": { type: Object, required: true },
    "pi|pe": { type: Object, required: true },
    "til~de": { type: Object, required: true },
    "da-sh": { type: Object, required: true }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ TS assertion 1`] = `
"
export default defineComponent({
  props: ['foo'],
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ exported interface 1`] = `
"export interface Props { x?: number }
    
export default defineComponent({
  __props: Props,
  props: {
    x: { type: Number, required: false }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ exported interface in normal script 1`] = `
"
      export interface Props { x?: number }
    
export default defineComponent({
  __props: Props,
  props: {
    x: { type: Number, required: false }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ exported type alias 1`] = `
"export type Props = { x?: number }
    
export default defineComponent({
  props: {
    x: { type: Number, required: false }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ extends interface 1`] = `
"interface Bar extends Foo { y?: number }
      interface Props extends Bar {
        z: number
        y: string
      }
      
      interface Foo { x?: number }
    
export default defineComponent({
  __props: Foo,
  props: {
    z: { type: Number, required: true },
    y: { type: String, required: true },
    x: { type: Number, required: false }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ interface 1`] = `
"interface Props { x?: number }
    
export default defineComponent({
  __props: Props,
  props: {
    x: { type: Number, required: false }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ leading code 1`] = `
"import { x } from './x'
    
export default defineComponent({
  props: {},
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;
const props = __props
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ type 1`] = `
"interface Test {}

    type Alias = number[]

    
export default defineComponent({
  props: {
    string: { type: String, required: true },
    number: { type: Number, required: true },
    boolean: { type: Boolean, required: true },
    object: { type: Object, required: true },
    fn: { type: Function as PropType<(n: number) => void>, required: true },
    functionRef: { type: Function, required: true },
    objectRef: { type: Object, required: true },
    dateTime: { type: Date, required: true },
    array: { type: Array as PropType<string[]>, required: true },
    arrayRef: { type: Array<any>, required: true },
    tuple: { type: Array as PropType<[number, number]>, required: true },
    set: { type: Set<string>, required: true },
    literal: { type: String, required: true },
    optional: { type: Object, required: false },
    recordRef: { type: Record<string, null>, required: true },
    interface: { type: Object, required: true },
    alias: { type: Array as PropType<number[]>, required: true },
    method: { type: Function, required: true },
    symbol: { type: Symbol, required: true },
    error: { type: Error, required: true },
    extract: { type: Extract<1 | 2 | boolean, 2>, required: true },
    exclude: { type: Exclude<1 | 2 | boolean, 2>, required: true },
    uppercase: { type: Uppercase<'foo'>, required: true },
    nonNull: { type: NonNullable<string | null>, required: true },
    union: { type: [String, Number], required: true },
    literalUnion: { type: String, required: true },
    literalUnionNumber: { type: Number, required: true },
    literalUnionMixed: { type: [String, Number, Boolean], required: true },
    intersection: { type: Object, required: true },
    intersection2: { type: String, required: true },
    foo: { type: Function as PropType<(item: any) => boolean>, required: false },
    unknown: { type: UnknownType, required: true },
    unknownUnion: { type: [UnknownType, String], required: true },
    unknownIntersection: { type: [UnknownType, Object], required: true },
    unknownUnionWithBoolean: { type: [UnknownType, Boolean], required: true },
    unknownUnionWithFunction: { type: [UnknownType, Function as PropType<() => any>], required: true },
    propType: { type: Object as PropType<()=>string>, required: true, skipCheck: true },
    any: { type: Object, required: false }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps w/ type alias 1`] = `
"type Props = { x?: number }
    
export default defineComponent({
  props: {
    x: { type: Number, required: false }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps withDefaults (static) + normal script 1`] = `
"
      interface Props {
        a?: string;
      }
    
export default defineComponent({
  __props: Props,
  props: {
    a: { type: String, required: false, default: "a" }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

      const props = __props;
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps withDefaults (static) 1`] = `
"
export default defineComponent({
  props: {
    foo: { type: String, required: false, default: 'hi' },
    bar: { type: Number, required: false },
    baz: { type: Boolean, required: true },
    qux: { type: Function, required: false, default() { return 1 } },
    quux: { type: Function, required: false, default() { } },
    quuxx: { type: Promise<string>, required: false, async default() { return await Promise.resolve('hi') } },
    fred: { type: String, required: false, get default() { return 'fred' } }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    const props = __props
    
return (): any | null => { return null }
}

})"
`;

exports[`defineProps withDefaults (static) w/ production mode 1`] = `
"
export default defineComponent({
  props: {
    foo: { type: Function as PropType<() => void>, required: true },
    bar: { type: Boolean, required: true },
    baz: { type: [Boolean, Function as PropType<() => void>], required: true, default: true },
    qux: { type: [String, Number], required: true, default: 'hi' }
  },
  setup(__props) {
const __ins = getCurrentInstance()!;
const _ctx = __ins.proxy;
const _cache = __ins.renderCache;

    const props = __props
    
return (): any | null => { return null }
}

})"
`;
